<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2017.2 (Build 543U)" ts="2017-05-12 19:51:06">
<Class name="Form.Util.Converter">
<Description>
Various datatype conversion utilities</Description>
<Abstract>1</Abstract>
<TimeChanged>64415,70660.763024</TimeChanged>
<TimeCreated>64100,82956.192829</TimeCreated>

<Method name="stringToArray">
<Description>
Convert delimited string to dynamic array</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>string:%String,delimiter:%String=","</FormalSpec>
<ReturnType>%DynamicArray</ReturnType>
<Implementation><![CDATA[
	set list = $listFromString(string, delimiter)
	return ..listToArray(list)
]]></Implementation>
</Method>

<Method name="listToArray">
<Description>
Convert $list to dynamic array</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>list:%List</FormalSpec>
<ReturnType>%DynamicArray</ReturnType>
<Implementation><![CDATA[
	set array = []
	set pointer = 0
	while $listNext(list, pointer, piece) {
		do array.%Push(piece)
	}
	return array
]]></Implementation>
</Method>

<Method name="sqlTypeToClass">
<Description>
TODO. Populate on install?</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%Integer=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if type = 2 {
		set result = "%Library.Date"
	} elseif type = 8 {
		set result = "%Library.Time"
	} elseif type = 9 {
		set result = "%Library.TimeStamp"
	} else {
		set result = ""
	}
	return result
]]></Implementation>
</Method>

<Method name="logicalToJSON">
<ClassMethod>1</ClassMethod>
<FormalSpec>datatype:%String="",value:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    return:datatype="" value
    if datatype = "%Library.Date" {
        set result = ##class(%Date).LogicalToXSD(value)
    } elseif datatype = "%Library.TimeStamp" {
	    set result = ##class(%TimeStamp).LogicalToXSD(value)
	    if ##class(Form.Settings).getSetting("timezone") = "ignore" {
		    set result = $extract(result, 1, *-1) // Remove trailing Z  
	    }
    } elseif datatype = "%Library.Time" {
        set result = ##class(%Time).LogicalToXSD(value)
    } else {
        set result = value
    }
    return result
]]></Implementation>
</Method>

<Method name="jsonToLogical">
<ClassMethod>1</ClassMethod>
<FormalSpec>datatype:%String="",value:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    return:datatype="" value
    if datatype = "%Library.Date" {
        set result = ##class(%Date).XSDToLogical(value)
    } elseif datatype = "%Library.TimeStamp" {
        set result = ##class(%TimeStamp).XSDToLogical(value)
    } elseif datatype = "%Library.Time" {
        set result = ##class(%Time).XSDToLogical(value)
    } else {
        set result = value
    }
    return result
]]></Implementation>
</Method>
</Class>
</Export>

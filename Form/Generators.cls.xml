<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2017.2 (Build 543U)" ts="2017-05-12 19:47:44">
<Class name="Form.Generators">
<Description>
Various generators called on form compilation which does not actually generate any code 
Generators that actually generate the code should be placed into Form.Adaptor class</Description>
<Abstract>1</Abstract>
<TimeChanged>64415,70021.635618</TimeChanged>
<TimeCreated>64110,50058.313465</TimeCreated>

<Method name="onGenerateMetadata">
<Description>
End form callback method</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&metadata:%DynamicObject]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[	Return $$$OK
]]></Implementation>
</Method>

<Method name="validateOrderBy">
<Description>
Validate FORMORDERBY parameter value if present</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<GenerateAfter>generateMetadata</GenerateAfter>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#Include Form
	#dim sc As %Status = $$$OK
	set className = %compiledclass.Name
	set formNameKey = %class.Parameters.FindObjectId(className _ "||" _ $$$formNameParam)
	set formName = $get(%parameter($$$formNameParam))
	return:(($$$skipClasses[className)||(formName="")||(formNameKey="")) sc
	
	set orderBy = $get(%parameter($$$orderByParam))
	return:(orderBy = "") sc
	
	set key = %compiledclass.Properties.FindObjectId(className _ "||" _ orderBy)
	return:key="" $$$ERROR($$$GeneralError, "Order by property '" _ orderBy _"' does not exist in '" _ className _ "' class. Redefine " _ $$$orderByParam _ " parameter")
	
	quit sc
]]></Implementation>
</Method>

<Method name="validatePermissions">
<Description>
Validate FORMORDERBY parameter value if present</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<GenerateAfter>generateMetadata</GenerateAfter>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#Include Form
	#dim sc As %Status = $$$OK
	set className = %compiledclass.Name
	set formNameKey = %class.Parameters.FindObjectId(className _ "||" _ $$$formNameParam)
	set formName = $get(%parameter($$$formNameParam))
	return:(($$$skipClasses[className)||(formName="")||(formNameKey="")) sc
	
	/// checkObjPermission method is redefined, so we don't check this class
	set key = %class.Methods.FindObjectId(className _ "||checkObjPermission")
	return:key'="" sc

	set permParam = $get(%parameter($$$objPermParam))
	/// $$$objPermParam parameter is not set
	return:permParam="" $$$ERROR($$$GeneralError, "Object permissions param '" _ $$$objPermParam _"' does not exist in '" _ className _ "' class. Define it.") 
	
	/// strip everything from $$$objPermParam except 'CRUD' characters
	set permParamStripped = $zstrip(permParam,"*E",,"CRUD")
	
	if permParam'=permParamStripped {
		set sc = $$$ERROR($$$GeneralError, "Object permissions param '" _ $$$objPermParam _"' = '" _ permParam _ "' in '" _ className _ "' class contains characters beyond 'CRUD'") 
	}
	
	quit sc
]]></Implementation>
</Method>

<Method name="translate">
<Description>
Fill ^CacheMsg global for further translation</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<GenerateAfter>generateMetadata</GenerateAfter>
<Implementation><![CDATA[
	#Include Form
	#dim sc As %Status = $$$OK
	set className = %compiledclass.Name
	set formNameKey = %class.Parameters.FindObjectId(className _ "||" _ $$$formNameParam)
	set formName = $get(%parameter($$$formNameParam))
	return:(($$$skipClasses[className)||(formName="")||(formNameKey="")) sc
	
	do ##class(Form.Util.Translate).insert(formName)
	
	#dim prop As %Dictionary.PropertyDefinition
	for i = 1:1:%class.Properties.Count() {
        set prop = %class.Properties.GetAt(i)
        set displayName = prop.Parameters.GetAt($$$propDisplayNameParam)
        if prop.Internal || prop.Calculated || prop.ReadOnly || prop.Private || prop.Identity || prop.MultiDimensional || displayName = ""  continue
		
		do ##class(Form.Util.Translate).insert(displayName)
    }
    quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
